- price_color = session[:prices][exit_list.ticker_id] >= session[:prev_prices][exit_list.ticker_id] ? 'green' : 'red'
%tr[exit_list]{:class => cycle('list-line-even', 'list-line-odd')}
  %td.ticker_id
    = lkup exit_list.ticker, :symbol
  %td.center
    = h exit_list.tda_position.entry_date
  %td.center
    = h exit_list.tda_position.compute_days_held
  %td.center
    = h exit_list.tda_position.entry_price
  %td.center{:class =>  price_color }
    = h exit_list.price
  %td.center
    = h format('%3.2f%%', exit_list.tda_position.roi())
  %td.center
    = h exit_list.volume
  %td.center
    = h exit_list.current_rsi.nil? ? '-' :format('%3.2f', exit_list.current_rsi)
  %td.center
    = h exit_list.current_rvi.nil? ? '-' : format('%3.2f', exit_list.current_rvi)
  %td.center
    = h exit_list.thresholds
  %td.center
    = h exit_list.nearest_indicator.upcase.strip
  %td.center
    = h format('%3.2f', exit_list.min_delta)
  %td.center
    = h exit_list.closed_crossed_at.nil? ? '-' :  exit_list.closed_crossed_at.to_formatted_s(:pm)
  %td.center
    = h exit_list.last_snaptime.nil? ? '-' :  exit_list.last_snaptime.to_formatted_s(:pm)
  %td.Plot
    = link_to 'Plot', plot_watch_list_path(exit_list)
  %td.show
    = link_to 'Close', close_watch_list_path(exit_list)
