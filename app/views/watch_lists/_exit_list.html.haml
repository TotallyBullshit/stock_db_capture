%tr[exit_list]{:class => cycle('list-line-even', 'list-line-odd')+(exit_list.closing_condition ? ' red' : '')}
  %td.ticker_id
    = lkup exit_list.ticker, :symbol
  %td.center
    = h exit_list.days_held
  %td.center
    = h exit_list.opened_on.to_formatted_s(:ymd)
  %td.center
    = h exit_list.tda_position ?  exit_list.tda_position.entry_price : '-'
  %td.center{:class =>  price_color(exit_list) }
    = h exit_list.price
  %td.center
    = h exit_list.rsi_target_price ? format('%3.2f', exit_list.rsi_target_price) : '-'
  %td.center
    = h exit_list.rvi_target_price ? format('%3.2f', exit_list.rvi_target_price) : '-'
  %td.center
    = h exit_list.tda_position && exit_list.tda_position.roi() && format('%3.2f%%', exit_list.tda_position.roi()) || '-'
  %td.center
    = h exit_list.volume
  %td.center
    = h exit_list.current_rsi.nil? ? '-' : format('%3.2f', exit_list.current_rsi)
  %td.center
    = h exit_list.current_rvi.nil? ? '-' : format('%3.2f', exit_list.current_rvi)
  %td.center
    = h exit_list.closed_crossed_at.nil? ? '-' :  exit_list.closed_crossed_at.to_formatted_s(:pm)
  %td.center
    = h exit_list.last_snaptime.nil? ? '-' :  (minutes = ((Time.now - exit_list.last_snaptime) / 60).round) > 9 ? '>' : minutes
  %td.close
    = link_to_unless exit_list.tda_position.nil?, 'Close', exit_list.tda_position.nil? ? ticker_tda_positions_path(exit_list.ticker) : close_tda_position_path(exit_list.tda_position)
  %td.destroy
    = link_to 'Destroy', object_path(exit_list), :confirm => 'Really destroy Watch List Item?', :method => :delete
