#!/usr/bin/env ruby
# Copyright Â© Kevin P. Nolan 2009 All Rights Reserved.

require '../config/mini-environment'
require 'task/message'
require 'task/config/compile/dsl'
require 'optparse'
require 'ostruct'

extend Task::Config::Compile

options = OpenStruct.new
optparse = OptionParser.new do |opts|
  opts.banner = "Usage tquery [options]"

  options.config = nil
  opts.on('-C', '--config FILE', String, "The Task Manager config file") do |config_file|
    options.config = config_file
  end

  options.messages = []
  opts.on('-m', '--messages a,b,c', Array, "List of messages to print") do |ary|
    options.messages = ary.map { |name| name.delete(':').to_sym }
  end

  options.loop = -1
  opts.on("-l", "--loop SECONDS", Integer, "loop every SECONDS printing the contents of the tuplespace ") do |l|
    options.loop = l
  end

  options.count_only = false
  opts.on("-c", "--count", "Return counts only of each message type") do |c|
    options.count_only = c
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

unless options.config
  puts "A config file must be specified"
  exit()
end

config = Task::Config::Compile::Dsl.load(options.config)

DRb.start_service
ring_server = Rinda::RingFinger.primary
ts = ring_server.read([:name, :TupleSpace, nil, nil])[2]
tuplespace = Rinda::TupleSpaceProxy.new ts

Task::Message.bind_to_message_fabric(tuplespace)
Task::Message.bind_to_config(config)

#
# If message array is empty, dump all messages instead of just the ones specified in --messages
#
loop do
  if options.messages.empty?
    config.tsort.each do |name|
      task = config.lookup_task(name)
      Task::Message.dump_all(task.name, task.inputs.length, options.count_only)
    end
  else
    config.tsort.each do |name|
      if options.messages.include?(name)
        task = config.lookup_task(name)
        Task::Message.dump_all(name, task.inputs.length, options.count_only)
      end
    end
  end
  break if options.loop < 0
  sleep(options.loop)
end

# Local Variables:
# mode:ruby
# End:
