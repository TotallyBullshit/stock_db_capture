#!/usr/bin/env ruby
# Copyright Â© Kevin P. Nolan 2009 All Rights Reserved.

require 'optparse'
require 'optparse/date'
require 'ostruct'
require 'pp'
require 'date'
#require 'rubygems'
#require 'ruby-debug'

options = OpenStruct.new

optparse = OptionParser.new do |opts|
  opts.banner = "Usage simulate [options]"

  opts.on('-P', '--prefix STRING', "prefix STRING to output csv files (defaults to the value of -T)") do |p|
    options.prefix = p
  end

  opts.on('-o', '--output summary,positions', Array, "list of what to output summary (one row per day), positions (one row per position") do |o|
    options.output = o
  end

  opts.on('-s', '--start_date DATE', Date, "start the simulation on DATE (defaults to 1/1/2000") do |d|
    options.start_date = d
  end

  opts.on('-e', '--end_date DATE', Date, "simulate up to DATE (defaults to last bar in DB)") do |d|
    options.end_date = d
  end

  opts.on('-l', '--log-level LEVEL', Integer, "log level can be 0, 1 or 2 for none, summary, or detailed repsectively (defaults to 0)") do |l|
    options.log_level = l
  end

  opts.on('-p', '--portfolio-size NUM_POSITIONS', Integer, "The max number of positions allowed in the portfolio (defaults to min_balance/order_amount)") do |ps|
    options.portfolio_size = ps
  end

  opts.on('-r', '--reinvest-percent NUMBER', Float, "Percentage of the cash on hand to reinvest defaults to 0") do |p|
    options.reinvest_percent = p
  end

  opts.on('-a', '--order-amount NUMBER', Float, "The dollar limit spent for every position, the more expensive the stock the fewer the shares for that position") do |os|
    options.order_amount = os
  end

  opts.on('-i', '--initial-balance NUMBER', Float, "The starting cash balance of the portfolio") do |i|
    options.initial_balance = i
  end

  opts.on('-m', '--minimum-balance NUMBER', Float, "The cash balance below which orders will not be generated") do |m|
    options.minimum_balance = m
  end

  opts.on('-E', '--entry-slippage close|high', "The way slippage on buy orders is computed. close=none, high=use the high price of the last bar of the day") do |s|
    options.entry_slippage = s
  end

  opts.on('-X', '--exit-slippage close|low', "The way slippage on sell orders is computed. close=none, low=use the low price of the last bar of the day") do |s|
    options.entry_slippage = s
  end

  opts.on('-C', '--order-charge NUMBER', Float, "The cost of and order (defaults to 7.00 dollars)") do |c|
    options.order_charge = m
  end

  opts.on('-I', '--interest-rate NUMBER', Float, "The annual interest rate applied to cash balance") do |i|
    options.interest_rate = i
  end

  opts.on('-T', '--position-table filtered|unfiltered', "The name of the position table in the DB containing the source population of positions") do |t|
    options.position_table = t
  end

  opts.on('-S', '--sort-by string', "The and expression which is value for the 'order by' component of the position query") do |s|
    options.sort_by = s
  end

  opts.on('-F', '--filter-predicate STRING', "SQL string defining the WHERE condition applied to the position query") do |p|
    options.filter_predicate = p
  end

  opts.on('-k', '--[no]-keep-tables', "Keep the generated position and summary_tables") do |k|
    options.keep_tables = k
  end

  opts.on('-d', '--output-dir DIR', "All output files will be stored in the specified (existing) directory instead of ./log") do |d|
    unless File.exist?(d) and (fs = File::Stat.new(d)) and fs.directory? and fs.writable?
      raise ArgumentError, "output directory: '#{d}' (-d or --output-dir) doesn't exist or isn't a directory or isn't writable"
    end
    options.dir = d
  end

  opts.on('-F', '--filter-predicate string', "SQL string defining the WHERE condition applied to the position query") do |p|
    options.filter_predicate = p
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    puts <<-EOS

Arguments values have the following precedence in the following priority 1)
command line 2) ~/.satvatr/simulate.yml 3) config.yml in
stock_db_capture/lib/sim.  The --portfolio-size and the --reinvest-percent
options are mutually exclusive. When --reinvest-percent is given the
portfolio size will continue to grow as the cash balance grows. The
percentage determines how much of the cash balance is reinvested into the
portfolio, growing it in number of positions. Specify a --portfolio-size if
you want to keep the portfolio size static at the given number of
positions. Hence the cash balance will continue to grow as positions are
sold. The only slippage currently implemented is "close", meaning no
slippage.  The values can be used as filters or as sorting elements are the
following: etprice, etival, xtprice, xtival, entry_date entry_price,
exit_date, exit_price, days_held, nreturn, roi, consumed_margin.

Examples:

  ./simulate -T filtered --filter-predicate 'entry_price > 5' --sort-by entry_price
  ./simulate -T unfiltered -i 500000 --filter-predicate 'days-held < 15' -sort-by days_held
  ./simulate -T alt_filtered -s 2009-1-1 -e 2009-10-31 -P 2009-Q3

EOS
    exit
  end
end

begin
  optparse.parse!
rescue Exception => e
  $stderr.puts "#{e.class}: #{e.to_s}"
  exit
end

options.apply_defaults = true

require '../config/environment.rb'
require 'sim/system_mgr'
Sim.run(options)

# Local Variables:
# mode:ruby
# End:
