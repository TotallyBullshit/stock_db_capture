# Copyright Â© Kevin P. Nolan 2009 All Rights Reserved.

require 'task/rcprime'


#-----------------------------------------------------------------------------------------------------------------
# The Producer, the unmoved mover
#-----------------------------------------------------------------------------------------------------------------
task :task0, :targets => [:task1], :inputs => [], :outputs => [TrueClass] do
  true
end

#-----------------------------------------------------------------------------------------------------------------
# Yield the primary key of the Scan record associated with this year
#-----------------------------------------------------------------------------------------------------------------
task :task1, :targets => [:task2], :inputs => [TrueClass], :outputs => [Integer], :flow => [1,:n] do
  (1..20).to_a
end

#-----------------------------------------------------------------------------------------------------------------
# This task takes a scan_id, looks up the Scan record and the bundles a triple of args needed by a Timeseries
# Note that this task directly generates messages as fast as it can read ticker_ids from the DB
#-----------------------------------------------------------------------------------------------------------------
task :task2,  :inputs => [Integer], :targets => [:task3 ], :outputs => [Integer], :flow => [:m,:n] do |n|
  sleep(rand(n))
  Array.new(rand(n)*20) { |i| i }
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all places where RSI gooes heads upwards of 30"
#------------------------------------------------------------------------------------------------------------------
task :task3, :targets => [:task4 ], :inputs => [Integer],:outputs => [Integer], :flow => [:m,:n] do |n|
#  sleep(rand(n))
  Array.new(rand(n)*10) { |i| i }
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all datetimes where an RSI crosses 50 from below for the given position"
#------------------------------------------------------------------------------------------------------------------
task :task4, :targets => [:task5], :inputs => [Integer],:outputs => [Integer], :flow => [1,1] do |n|
#  sleep(rand(10))
  n
end

#-----------------------------------------------------------------------------------------------------------------
# "Close positions that have been triggered from an RVI or and RSI and whose indicatars have continued to climb until
# they peak out or level out"
#------------------------------------------------------------------------------------------------------------------
task :task5, :targets => [], :inputs => [Integer],:outputs => [], :flow => [1,0] do
  sleep(rand(5))
end

global_options :generate_stats => false, :log_flags => [:basic], :verbose => true, :logger_type => :remote,
  :csettings => {
    task1: { pri: 1, timeout: 60,  retries: 0,  ttr: 5,  no_raise: true },
    task2: { pri: 1, timeout: 60,  retries: 0,  ttr: 5,  no_raise: true },
    task3: { pri: 1, timeout: 60,  retries: 0,  ttr: 60,  no_raise: true },
    task4: { pri: 1, timeout: 60,  retries: 1,  ttr: 60,  no_raise: true },
    task5: { pri: 1, timeout: 60,  retries: 0,  ttr: 60,  no_raise: true },
  }


post_process do
end

# Local Variables:
# mode:ruby
# End:
