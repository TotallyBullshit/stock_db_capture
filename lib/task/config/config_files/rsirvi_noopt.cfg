# Copyright Â© Kevin P. Nolan 2009 All Rights Reserved.

require 'rpctypes'
extend Task::RPCTypes
#
# Encodings for Composite Types
#
type Position, :signature => PositionProxy do |proxy|
  if proxy.is_a?(Array)
    PositionProxy.dereference(proxy)
  else
    proxy.dereference
  end
end

type PositionProxy, :signature => Position do |position|
  position.to_proxy
end

type TimeseriesProxy, :signature => Timeseries do |timeseries|
  timeseries.to_proxy
end

type Timeseries, :signature => TimeseriesProxy do |proxy|
  if proxy.is_a?(Array)
    TimeseriesProxy.dereference(proxy)
  else
    proxy.dereference
  end
end

type Displacement, :signature => DisplacementProxy do |proxy|
  if proxy.is_a?(Array)
    DisplacementProxy.dereference(proxy)
  else
    proxy.dereference
  end
end

type DisplacementProxy, :signature => Displacement do |displacement|
  displacement.to_proxy
end

type :confirmation, :signature => [nil, Integer] do |flag|
  flag
end

#-----------------------------------------------------------------------------------------------------------------
# Yield the primary key of the Scan record associated with this year
#-----------------------------------------------------------------------------------------------------------------
task :scan_gen, :targets => [:timeseries_args], :inputs => [], :outputs => [Integer], :result_protocol => :yield do
  for year in 2000..2009
    scan = Scan.find_by_year(year)
    yield_value scan.id
  end
  Thread.current.exit
end

#-----------------------------------------------------------------------------------------------------------------
# This task takes a scan_id, looks up the Scan record and the bundles a triple of args needed by a Timeseries
# Note that this task directly generates messages as fast as it can read ticker_ids from the DB
#-----------------------------------------------------------------------------------------------------------------
task :timeseries_args,  :inputs => [Integer], :targets => [:rsi_trigger_14 ], :outputs => [Timeseries],
                        :result_protocol => :yield do |scan_id|
  scan = Scan.find scan_id
  start_date = scan.start_date
  end_date = scan.end_date
  for ticker_id in scan.population_ids
    yield_value Task::RPCTypes::TimeseriesProxy.new(ticker_id, start_date..end_date, 1.day)
  end
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all places where RSI gooes heads upwards of 30"
#------------------------------------------------------------------------------------------------------------------
task :rsi_trigger_14, :targets => [:rsi_rvi_50 ], :inputs => [Timeseries],:outputs => [Position], :result_protocol => :yield,
                      :params => { :time_period => 14,:epass => 0..2, :result => [:rsi] } do |ts|
  task = self
  ts.logger = task.logger
  ind_id = Indicator.lookup(:rsi).id
  index_hash = { }
  for pass in params[:epass]
    begin
      position = nil
      ts.instance_exec(task, params, pass) do |task, params, pass|
        rsi_vec = rsi(params).first
        indexes = under_threshold(20+pass*5, rsi_vec)
        uniq_indexes = indexes.reject { |index| flag = index_hash[index]; index_hash[index] = true; flag }
        for index in uniq_indexes
          trigger_date, trigger_price = ts.closing_values_at(index)
          trigger_ival = ts.result_at(index, :rsi)
          begin
            position = Position.trigger_entry_and_open(ticker_id, trigger_date, trigger_price, ind_id, trigger_ival, pass)
            task.yield_value position
          rescue ActiveRecord::StatementInvalid => e
            error "#{e.class} #{e.message} tid: #{ticker_id} td: #{tigger_date} ind_id: #{ind_id}" 'rsi_trigger_14'
          end
        end
      end
    rescue TimeseriesException => e
      error "#{e.class} #{e.message}", task.name
    end
  end
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all datetimes where an RSI crosses 50 from below for the given position"
#------------------------------------------------------------------------------------------------------------------
task :rsi_rvi_50, :targets => [], :inputs => [Position],:outputs => [], :wrapper => :displacement,
                  :params => { :start_date => :entry_date, :time_period => 14, :window => 20, :threshold => 50, :result => :gv } do |params, position|
  # NB we MUST make a copy of the params hash, otherwise close_under_min keep rewriting the prop[:time] array with every loop of the method passed in
  time, method = close_under_min(:rsi => params.dup, :rvi => params.dup)
  time = max_exit_date if time.nil?
  debugger if time.nil?
  position.trigger_exit(time, value_at(time, :close), method,  method.nil? ? nil : result_at(time, method))
  position.close(time, value_at(time, :close), method,  method.nil? ? nil : result_at(time, method))
end


global_options :generate_stats => false, :truncate => true, :repopulate => true, :log_flags => [:basic], :resolution => 1.day,
               :prefetch => Timeseries.prefetch_bars(:rsi, 14), :postfetch => 20, :populate => true, :verbose => true,
               :logger_type => :stderr#, :message_timeout => 11

post_process do
#  make_sheet([:opening, :close, :high, :low, :volume], :pre_days => 1, :post_days => 30, :keep => true)
end

# Local Variables:
# mode:ruby
# End:
