# Copyright Â© Kevin P. Nolan 2009 All Rights Reserved.

require 'rpctypes'
require 'timeseries'

extend Task::RPCTypes

#-----------------------------------------------------------------------------------------------------------------
# The Producer, the unmoved mover
#-----------------------------------------------------------------------------------------------------------------
task :starter, :targets => [:scan_gen], :inputs => [], :outputs => [TrueClass] do
  true
end

#-----------------------------------------------------------------------------------------------------------------
# Yield the primary key of the Scan record associated with this year
#-----------------------------------------------------------------------------------------------------------------
task :scan_gen, :targets => [:timeseries_args], :inputs => [TrueClass], :outputs => [Integer], :flow => [1,:n] do
  (2000..2009).map { |year| Scan.find_by_year(year).id }
end

#-----------------------------------------------------------------------------------------------------------------
# This task takes a scan_id, looks up the Scan record and the bundles a triple of args needed by a Timeseries
# Note that this task directly generates messages as fast as it can read ticker_ids from the DB
#-----------------------------------------------------------------------------------------------------------------
task :timeseries_args,  :inputs => [Integer], :targets => [:rsi_trigger_14 ], :outputs => [Timeseries], :flow => [:m,:n] do |scan_id|
  begin
    scan = Scan.find scan_id
    start_date = scan.start_date
    end_date = scan.end_date
    pop_ids = scan.population_ids
    ts_proxies = pop_ids.map { |ticker_id| Task::RPCTypes::TimeseriesProxy.new(ticker_id, start_date..end_date, 1.day) }
  rescue Exception => e
    error "Exception in timeseries args: #{e} fo scan_id: #{scan_id}"
  end
  ts_proxies
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all places where RSI gooes heads upwards of 30"
#------------------------------------------------------------------------------------------------------------------
task :rsi_trigger_14, :targets => [:rsi_rvi_50 ], :inputs => [Timeseries],:outputs => [Integer], :flow => [:m,:n],
                      :params => { :time_period => 14,:epass => 0..2, :result => [:rsi] } do |ts|
  task = self
  ind_id = Indicator.lookup(:rsi).id
  index_hash = { }
  proxies = []
  for pass in params[:epass]
    begin
      position = nil
      ts.instance_exec(task, params, pass) do |task, params, pass|
        rsi_vec = rsi(params).first
        indexes = under_threshold(20+pass*5, rsi_vec)
        uniq_indexes = indexes.reject { |index| flag = index_hash[index]; index_hash[index] = true; flag }
        for index in uniq_indexes
          trigger_date, trigger_price = ts.closing_values_at(index)
          trigger_ival = ts.result_at(index, :rsi)
          begin
            position = Position.trigger_entry_and_open(ticker_id, trigger_date, trigger_price, ind_id, trigger_ival, pass)
            proxies << position.id
          rescue Exception, ActiveRecord::StatementInvalid => e
            error "#{e.class} #{e.message}"
          end
        end
      end
    rescue Exception, TimeseriesException => e
      error "#{e.class} #{e.message}", task.name
    end
  end
  proxies
end

#-----------------------------------------------------------------------------------------------------------------
# "Find all datetimes where an RSI crosses 50 from below for the given position"
#------------------------------------------------------------------------------------------------------------------
task :rsi_rvi_50, :targets => [:lagged_rsi_difference], :inputs => [Integer],:outputs => [Integer], :wrapper => :displacement, :flow => [1,1],
                  :params => { :start_date => :entry_date, :time_period => 14, :window => 20, :threshold => 50, :result => :gv } do |params, position|
  # NB we MUST make a copy of the params hash, otherwise close_under_min keep rewriting the prop[:time] array with every loop of the method passed in
  time, method = close_under_min(:rsi => params.dup, :rvi => params.dup)
  time = max_exit_date if time.nil?
  debugger if time.nil?
  position.trigger_exit(time, value_at(time, :close), method,  method.nil? ? nil : result_at(time, method))
  position.id
end

#-----------------------------------------------------------------------------------------------------------------
# "Close positions that have been triggered from an RVI or and RSI and whose indicatars have continued to climb until
# they peak out or level out"
#------------------------------------------------------------------------------------------------------------------
task :lagged_rsi_difference, :targets => [], :inputs => [Integer],:outputs => [], :wrapper => :displacement, :flow => [1,0],
                             :params => { :start_date => :xttime, :time_period => 14, :window => 10, :result => :gv } do |params, position|
  rsi_ary = rsi(params)
  diff_vec = rsi_ary.diff()
  dn = diff_vec.to_a.index { |diff| diff <= 0.0 }
  index = dn.nil? ? params[:window] : dn
  time = rindex2time(index)        # we need to adjust by the result_offset since we are not using a "crossing" function which does it automatically
  debugger if time.nil?
  position.close(time, value_at(time, :close), :rsi, result_at(time, :rsi))
end


global_options :generate_stats => false, :truncate => true, :repopulate => true, :log_flags => [:basic], :resolution => 1.day,
               :prefetch => Timeseries.prefetch_bars(:rsi, 14), :postfetch => 20, :populate => true, :verbose => true,
               :logger_type => :remote,
               :csettings => {
  scan_gen:              { pri: 1, timeout: 5,  retries: 0,   ttr: 0, no_raise: true },
  timeseries_args:       { pri: 2, timeout: 5,  retries: 0,   ttr: 0, no_raise: false },
  rsi_trigger_14:        { pri: 3, timeout: 15, retries: 10,  ttr: 0, no_raise: false },
  rsi_rvi_50:            { pri: 4, timeout: 50, retries: 10,  ttr: 0, no_raise: false },
  lagged_rsi_difference: { pri: 5, timeout: 60, retries: 10,  ttr: 0, no_raise: false },
}


post_process do
#  make_sheet([:opening, :close, :high, :low, :volume], :pre_days => 1, :post_days => 30, :keep => true)
end

# Local Variables:
# mode:ruby
# End:
